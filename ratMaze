#include <iostream>
#include <vector>

using namespace std;

const int N = 5; // Size of the maze

// Function to print the solution matrix
void printSolution(vector<vector<int>>& sol) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << sol[i][j] << " ";
        }
        cout << endl;
    }
}

// Function to check if a cell is a valid and safe move
bool isSafe(vector<vector<int>>& maze, int x, int y) {
    return (x >= 0 && y >= 0 && x < N && y < N && maze[x][y] == 0);
}

// Recursive function to solve the rat maze problem
bool solveMaze(vector<vector<int>>& maze, int x, int y, vector<vector<int>>& sol) {
    // If the rat reaches the destination, we have found a path
    if (x == N - 1 && y == N - 1) {
        sol[x][y] = 1;
        return true;
    }

    // Check if the current cell is a valid move
    if (isSafe(maze, x, y)) {
        // Mark the cell as part of the solution path
        sol[x][y] = 1;

        // Move right
        if (solveMaze(maze, x + 1, y, sol))
            return true;

        // Move down
        if (solveMaze(maze, x, y + 1, sol))
            return true;

        // If no move leads to a solution, backtrack
        sol[x][y] = 0;
        return false;
    }

    return false;
}

int main() {
    vector<vector<int>> maze = {{0, 1, 0, 0, 0},
                                {0, 1, 0, 1, 0},
                                {0, 0, 0, 0, 0},
                                {0, 1, 1, 1, 0},
                                {0, 0, 0, 0, 0}};

    vector<vector<int>> solution(N, vector<int>(N, 0));

    if (solveMaze(maze, 0, 0, solution)) {
        cout << "Solution Path:" << endl;
        printSolution(solution);
    } else {
        cout << "No solution exists." << endl;
    }

    return 0;
}
